
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
Prisma.prismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.NewsletterBatchScalarFieldEnum = {
  id: 'id',
  siteId: 'siteId',
  fromEmail: 'fromEmail',
  contents: 'contents',
  batchId: 'batchId',
  created: 'created'
};

exports.Prisma.NewsletterMessagesScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  toEmail: 'toEmail',
  newsletterBatchId: 'newsletterBatchId',
  created: 'created',
  formatedContents: 'formatedContents'
};

exports.Prisma.NewsletterErrorsScalarFieldEnum = {
  id: 'id',
  toEmail: 'toEmail',
  error: 'error',
  created: 'created',
  newsletterBatchId: 'newsletterBatchId',
  messageId: 'messageId',
  formatedContents: 'formatedContents'
};

exports.Prisma.NewsletterNotificationsScalarFieldEnum = {
  id: 'id',
  type: 'type',
  notificationId: 'notificationId',
  messageId: 'messageId',
  rawEvent: 'rawEvent',
  timestamp: 'timestamp',
  created: 'created'
};

exports.Prisma.SystemMailNotificationsScalarFieldEnum = {
  id: 'id',
  type: 'type',
  notificationId: 'notificationId',
  messageId: 'messageId',
  rawEvent: 'rawEvent',
  timestamp: 'timestamp',
  created: 'created'
};

exports.Prisma.SystemMailsScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  fromEmail: 'fromEmail',
  toEmail: 'toEmail',
  subject: 'subject',
  contents: 'contents',
  created: 'created',
  updated: 'updated',
  status: 'status'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NewsletterBatchOrderByRelevanceFieldEnum = {
  id: 'id',
  siteId: 'siteId',
  fromEmail: 'fromEmail',
  contents: 'contents',
  batchId: 'batchId'
};

exports.Prisma.NewsletterMessagesOrderByRelevanceFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  toEmail: 'toEmail',
  newsletterBatchId: 'newsletterBatchId',
  formatedContents: 'formatedContents'
};

exports.Prisma.NewsletterErrorsOrderByRelevanceFieldEnum = {
  id: 'id',
  toEmail: 'toEmail',
  error: 'error',
  newsletterBatchId: 'newsletterBatchId',
  messageId: 'messageId',
  formatedContents: 'formatedContents'
};

exports.Prisma.NewsletterNotificationsOrderByRelevanceFieldEnum = {
  id: 'id',
  type: 'type',
  notificationId: 'notificationId',
  messageId: 'messageId',
  rawEvent: 'rawEvent'
};

exports.Prisma.SystemMailNotificationsOrderByRelevanceFieldEnum = {
  id: 'id',
  type: 'type',
  notificationId: 'notificationId',
  messageId: 'messageId',
  rawEvent: 'rawEvent'
};

exports.Prisma.SystemMailsOrderByRelevanceFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  fromEmail: 'fromEmail',
  toEmail: 'toEmail',
  subject: 'subject',
  contents: 'contents'
};
exports.SystemMailStatus = exports.$Enums.SystemMailStatus = {
  pending: 'pending',
  sent: 'sent',
  error: 'error'
};

exports.Prisma.ModelName = {
  NewsletterBatch: 'NewsletterBatch',
  NewsletterMessages: 'NewsletterMessages',
  NewsletterErrors: 'NewsletterErrors',
  NewsletterNotifications: 'NewsletterNotifications',
  SystemMailNotifications: 'SystemMailNotifications',
  SystemMails: 'SystemMails'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/home/ubuntu/mailgun-to-ses-proxy/lib/generated",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "debian-openssl-3.0.x",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/home/ubuntu/mailgun-to-ses-proxy/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../.env"
  },
  "relativePath": "../../prisma",
  "clientVersion": "6.18.0",
  "engineVersion": "34b5a692b7bd79939a9a2c3ef97d816e749cda2f",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "mysql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../lib/generated\"\n}\n\ndatasource db {\n  provider = \"mysql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel NewsletterBatch {\n  id                  String               @id @default(uuid())\n  siteId              String\n  fromEmail           String               @db.Text\n  contents            String               @db.LongText\n  batchId             String\n  created             DateTime             @default(now())\n  NewslettersMessages NewsletterMessages[]\n  NewslettersErrors   NewsletterErrors[]\n}\n\nmodel NewsletterMessages {\n  id                 String                    @id @default(uuid())\n  messageId          String                    @unique\n  toEmail            String                    @db.Text\n  newsletterBatchId  String\n  created            DateTime                  @default(now())\n  formatedContents   String                    @db.LongText\n  notificationEvents NewsletterNotifications[]\n  newsletterBatch    NewsletterBatch           @relation(fields: [newsletterBatchId], references: [id])\n}\n\nmodel NewsletterErrors {\n  id                String          @id @default(uuid())\n  toEmail           String          @db.Text\n  error             String          @db.Text\n  created           DateTime        @default(now())\n  newsletterBatchId String\n  messageId         String          @unique\n  formatedContents  String          @db.LongText\n  newsletterBatch   NewsletterBatch @relation(fields: [newsletterBatchId], references: [id])\n}\n\nmodel NewsletterNotifications {\n  id             String             @id @default(uuid())\n  type           String\n  notificationId String             @unique\n  messageId      String\n  rawEvent       String             @db.Text\n  timestamp      DateTime\n  created        DateTime           @default(now())\n  newsletter     NewsletterMessages @relation(fields: [messageId], references: [messageId])\n}\n\nmodel SystemMailNotifications {\n  id             String      @id @default(uuid())\n  type           String\n  notificationId String      @unique\n  messageId      String\n  rawEvent       String      @db.Text\n  timestamp      DateTime\n  created        DateTime    @default(now())\n  systemMail     SystemMails @relation(fields: [messageId], references: [messageId])\n}\n\nenum SystemMailStatus {\n  pending\n  sent\n  error\n}\n\nmodel SystemMails {\n  id                      String                    @id @default(uuid())\n  messageId               String                    @unique\n  fromEmail               String                    @db.Text\n  toEmail                 String                    @db.Text\n  subject                 String                    @db.Text\n  contents                String                    @db.LongText\n  created                 DateTime                  @default(now())\n  updated                 DateTime                  @updatedAt\n  status                  SystemMailStatus          @default(pending)\n  SystemMailNotifications SystemMailNotifications[]\n}\n",
  "inlineSchemaHash": "59ed4dcb732ae111afce8252fb47d646445d509c5613ca099bbb114d112c52c5",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"NewsletterBatch\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"siteId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fromEmail\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"contents\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"batchId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"created\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"NewslettersMessages\",\"kind\":\"object\",\"type\":\"NewsletterMessages\",\"relationName\":\"NewsletterBatchToNewsletterMessages\"},{\"name\":\"NewslettersErrors\",\"kind\":\"object\",\"type\":\"NewsletterErrors\",\"relationName\":\"NewsletterBatchToNewsletterErrors\"}],\"dbName\":null},\"NewsletterMessages\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"messageId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"toEmail\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"newsletterBatchId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"created\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"formatedContents\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"notificationEvents\",\"kind\":\"object\",\"type\":\"NewsletterNotifications\",\"relationName\":\"NewsletterMessagesToNewsletterNotifications\"},{\"name\":\"newsletterBatch\",\"kind\":\"object\",\"type\":\"NewsletterBatch\",\"relationName\":\"NewsletterBatchToNewsletterMessages\"}],\"dbName\":null},\"NewsletterErrors\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"toEmail\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"error\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"created\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"newsletterBatchId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"messageId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"formatedContents\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"newsletterBatch\",\"kind\":\"object\",\"type\":\"NewsletterBatch\",\"relationName\":\"NewsletterBatchToNewsletterErrors\"}],\"dbName\":null},\"NewsletterNotifications\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"notificationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"messageId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"rawEvent\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"timestamp\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"created\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"newsletter\",\"kind\":\"object\",\"type\":\"NewsletterMessages\",\"relationName\":\"NewsletterMessagesToNewsletterNotifications\"}],\"dbName\":null},\"SystemMailNotifications\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"notificationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"messageId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"rawEvent\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"timestamp\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"created\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"systemMail\",\"kind\":\"object\",\"type\":\"SystemMails\",\"relationName\":\"SystemMailNotificationsToSystemMails\"}],\"dbName\":null},\"SystemMails\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"messageId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fromEmail\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"toEmail\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"subject\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"contents\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"created\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updated\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"SystemMailStatus\"},{\"name\":\"SystemMailNotifications\",\"kind\":\"object\",\"type\":\"SystemMailNotifications\",\"relationName\":\"SystemMailNotificationsToSystemMails\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

