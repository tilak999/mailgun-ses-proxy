
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.10.1
 * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
 */
Prisma.prismaVersion = {
  client: "6.10.1",
  engine: "9b628578b3b7cae625e8c927178f15a170e74a9c"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.NewsletterBatchScalarFieldEnum = {
  id: 'id',
  siteId: 'siteId',
  fromEmail: 'fromEmail',
  contents: 'contents',
  batchId: 'batchId',
  created: 'created'
};

exports.Prisma.NewsletterMessagesScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  toEmail: 'toEmail',
  newsletterBatchId: 'newsletterBatchId',
  created: 'created',
  formatedContents: 'formatedContents'
};

exports.Prisma.NewsletterErrorsScalarFieldEnum = {
  id: 'id',
  toEmail: 'toEmail',
  error: 'error',
  created: 'created',
  newsletterBatchId: 'newsletterBatchId',
  messageId: 'messageId',
  formatedContents: 'formatedContents'
};

exports.Prisma.NewsletterNotificationsScalarFieldEnum = {
  id: 'id',
  type: 'type',
  notificationId: 'notificationId',
  messageId: 'messageId',
  rawEvent: 'rawEvent',
  timestamp: 'timestamp',
  created: 'created'
};

exports.Prisma.SystemMailNotificationsScalarFieldEnum = {
  id: 'id',
  type: 'type',
  notificationId: 'notificationId',
  messageId: 'messageId',
  rawEvent: 'rawEvent',
  timestamp: 'timestamp',
  created: 'created'
};

exports.Prisma.SystemMailsScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  fromEmail: 'fromEmail',
  toEmail: 'toEmail',
  subject: 'subject',
  contents: 'contents',
  created: 'created',
  updated: 'updated',
  status: 'status'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NewsletterBatchOrderByRelevanceFieldEnum = {
  id: 'id',
  siteId: 'siteId',
  fromEmail: 'fromEmail',
  contents: 'contents',
  batchId: 'batchId'
};

exports.Prisma.NewsletterMessagesOrderByRelevanceFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  toEmail: 'toEmail',
  newsletterBatchId: 'newsletterBatchId',
  formatedContents: 'formatedContents'
};

exports.Prisma.NewsletterErrorsOrderByRelevanceFieldEnum = {
  id: 'id',
  toEmail: 'toEmail',
  error: 'error',
  newsletterBatchId: 'newsletterBatchId',
  messageId: 'messageId',
  formatedContents: 'formatedContents'
};

exports.Prisma.NewsletterNotificationsOrderByRelevanceFieldEnum = {
  id: 'id',
  type: 'type',
  notificationId: 'notificationId',
  messageId: 'messageId',
  rawEvent: 'rawEvent'
};

exports.Prisma.SystemMailNotificationsOrderByRelevanceFieldEnum = {
  id: 'id',
  type: 'type',
  notificationId: 'notificationId',
  messageId: 'messageId',
  rawEvent: 'rawEvent'
};

exports.Prisma.SystemMailsOrderByRelevanceFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  fromEmail: 'fromEmail',
  toEmail: 'toEmail',
  subject: 'subject',
  contents: 'contents'
};
exports.SystemMailStatus = exports.$Enums.SystemMailStatus = {
  pending: 'pending',
  sent: 'sent',
  error: 'error'
};

exports.Prisma.ModelName = {
  NewsletterBatch: 'NewsletterBatch',
  NewsletterMessages: 'NewsletterMessages',
  NewsletterErrors: 'NewsletterErrors',
  NewsletterNotifications: 'NewsletterNotifications',
  SystemMailNotifications: 'SystemMailNotifications',
  SystemMails: 'SystemMails'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
